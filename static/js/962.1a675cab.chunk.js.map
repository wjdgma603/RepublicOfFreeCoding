{"version":3,"file":"static/js/962.1a675cab.chunk.js","mappings":"uJAgFA,QA7EA,WACI,MAAMA,GAAOC,EAAAA,EAAAA,UA0Eb,OAzEAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAUH,EAAKI,QAEfC,EAAQ,IAAIC,EAAAA,IAEZC,EAAQ,CACVC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAGbC,EAAS,IAAIP,EAAAA,IAAwB,GAAIC,EAAMC,MAAQD,EAAMI,OAAQ,GAAK,KAChFE,EAAOC,SAASC,IAAI,EAAE,EAAE,GACxBF,EAAOG,OAAO,EAAG,EAAG,GACpBX,EAAMY,IAAIJ,GAEV,MAAMK,EAAW,IAAIZ,EAAAA,IAAoB,CACrCa,OAAQC,SAASC,cAAc,UAC/BC,WAAW,EACXC,OAAO,IAIXL,EAASM,QAAQjB,EAAMC,MAAOD,EAAMI,QACpCO,EAASO,cAAcC,KAAKC,IAAIlB,OAAOmB,iBAAkB,IACzDV,EAASW,cAAc,EAAU,GAEjC1B,EAAQ2B,YAAYZ,EAASa,YAE7BtB,OAAOuB,iBAAiB,UAAU,KAE9BzB,EAAMC,MAAQL,EAAQ8B,YACtB1B,EAAMI,OAASR,EAAQ+B,aAGvBrB,EAAOsB,OAAS5B,EAAMC,MAAQD,EAAMI,OACpCE,EAAOuB,yBAGPlB,EAASM,QAAQjB,EAAMC,MAAOD,EAAMI,QACpCO,EAASO,cAAcC,KAAKC,IAAIlB,OAAOmB,iBAAkB,GAAG,IAMhE,MAAMS,EAAoB,IAAI/B,EAAAA,IAAkB,KAAM,KAAM,MACtDgC,EAAoB,IAAIhC,EAAAA,IAAwB,CAAEiC,MAAM,WACxDC,EAAkB,GAExB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAC3B,MAAMC,EAAgB,IAAIpC,EAAAA,IAAW+B,EAAmBC,GACxDI,EAAc5B,SAAS6B,GAAKjB,KAAKkB,SAAW,KAAwB,GAAhBlB,KAAKkB,UACzDF,EAAc5B,SAAS+B,GAAKnB,KAAKkB,SAAW,KAAwB,GAAhBlB,KAAKkB,UACzDF,EAAc5B,SAASgC,GAAKpB,KAAKkB,SAAW,KAAwB,GAAhBlB,KAAKkB,UACzDvC,EAAMY,IAAIyB,GACVF,EAAgBO,KAAKL,EACzB,CAEA,MAAMM,EAAQ,IAAI1C,EAAAA,IACZ2C,EAAUA,KACZxC,OAAOyC,sBAAsBD,GAC7B,MAAME,EAAQH,EAAMI,WACpBZ,EAAgBa,SAASC,IACrBA,EAASxC,SAAS+B,GAAKM,EAAQ,EAC3BG,EAASxC,SAAS+B,GAAK,IACvBS,EAASxC,SAAS+B,EAAI,EAC1B,IAGJ3B,EAASqC,OAAOlD,EAAOQ,EAAO,EAElCoC,GAAS,GACV,KACIO,EAAAA,EAAAA,KAAA,WAASC,GAAG,cAAcC,IAAK1D,GAC1C,C","sources":["components/Pages/Main/SubComponent/Back.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { useRef, useEffect } from 'react';\r\n\r\nfunction Back() {\r\n    const back = useRef();\r\n    useEffect(() => {\r\n        const backCur = back.current;\r\n        // Scene\r\n        const scene = new THREE.Scene();\r\n        // Size\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n        // Camera\r\n        const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\r\n        camera.position.set(0,0,0); // 카메라 위치 조절\r\n        camera.lookAt(0, 0, 0); // 카메라가 원점(0,0,0)을 바라보도록 함\r\n        scene.add(camera);\r\n        // Renderer\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: document.createElement(\"canvas\"),\r\n            antialias: true,\r\n            alpha: true\r\n        });\r\n\r\n\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        renderer.setClearColor(0x000000, 0.0);\r\n\r\n        backCur.appendChild(renderer.domElement);\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            // 크기 업데이트\r\n            sizes.width = backCur.clientWidth;\r\n            sizes.height = backCur.clientHeight;\r\n\r\n            // 카메라 업데이트\r\n            camera.aspect = sizes.width / sizes.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            // 렌더러 업데이트\r\n            renderer.setSize(sizes.width, sizes.height);\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        });\r\n\r\n\r\n\r\n        // 입자\r\n        const particlesGeometry = new THREE.BoxGeometry(0.003,0.003,0.003);  // 입자의 크기임\r\n        const particlesMaterial = new THREE.MeshBasicMaterial({ color: `#white` }); //입자 색\r\n        const particlesMeshes = [];\r\n\r\n        for (let i = 0; i < 1000; i++) {\r\n            const particlesMesh = new THREE.Mesh(particlesGeometry, particlesMaterial);\r\n            particlesMesh.position.x = (Math.random() - 0.5) * (Math.random() * 10);\r\n            particlesMesh.position.y = (Math.random() - 0.5) * (Math.random() * 10);\r\n            particlesMesh.position.z = (Math.random() - 0.5) * (Math.random() * 10);\r\n            scene.add(particlesMesh);\r\n            particlesMeshes.push(particlesMesh);\r\n        }\r\n\r\n        const clock = new THREE.Clock();\r\n        const animate = () => {\r\n            window.requestAnimationFrame(animate);\r\n            const delta = clock.getDelta();\r\n            particlesMeshes.forEach((particle) => {\r\n                particle.position.y -= delta / 2; // y축으로 떨어지기\r\n                if (particle.position.y < -3) {\r\n                    particle.position.y = 3;\r\n                } // 무한으로 떨어지는 거 구현\r\n            });\r\n\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n    }, []);\r\n    return <section id=\"backsection\" ref={back}></section>;\r\n}\r\nexport default Back;"],"names":["back","useRef","useEffect","backCur","current","scene","THREE","sizes","width","window","innerWidth","height","innerHeight","camera","position","set","lookAt","add","renderer","canvas","document","createElement","antialias","alpha","setSize","setPixelRatio","Math","min","devicePixelRatio","setClearColor","appendChild","domElement","addEventListener","clientWidth","clientHeight","aspect","updateProjectionMatrix","particlesGeometry","particlesMaterial","color","particlesMeshes","i","particlesMesh","x","random","y","z","push","clock","animate","requestAnimationFrame","delta","getDelta","forEach","particle","render","_jsx","id","ref"],"sourceRoot":""}